ghq () {
    root=${$(git config --get $0.root):-~/extrepo}
    git=${GIT-git}

    __ghq_clone () {
        url=${1%/}
        parts=("${(s#/#)url%.git}")
        name=${parts[-2]##*:}
        proj=$parts[-1]
        test -n "$name" && test -n "$proj" || (echo "Could not parse URL: $url"; false) || return
        (
            __ghq_cd
            test -d @$name || mkdir @$name
            if [ -L $proj ]; then
                echo "$proj is already cloned; Now add new remote"
                (cd $proj; $git remote add $name $url; $git remote update $name);
            else
                (cd @$name; $git clone $url $proj)
                ln -v -s @$name/$proj $proj
            fi
        )
    }

    __ghq_cd () {
        echo "$root/$1"
        cd $root/$1 > /dev/null
    }

    __ghq_git () {
        __ghq_cd $1
        shift
        echo "$git $@"
        $git "$@"
    }

    case $1 in
        -clone)
            __ghq_clone $2
        ;;

        -cd)
            __ghq_cd $2
        ;;

        -git)
            shift
            __ghq_git "$@"
        ;;

        http://*|https://*|git://*|git@*|*.git)
            __ghq_clone $1
        ;;

        *|)
            if [ -n "$1" -a -d "$root/$1" ]; then
                if [ "$#" -eq 1 ]; then
                    __ghq_cd $1
                else
                    __ghq_git "$@"
                fi
            elif [ "$#" -eq 1 ]; then
		__ghq_clone "git@github.com:$1.git"
            else
                cat <<USAGE
Usage: $0 <url>                          ; or $0 -clone <url>
       $0 <project>                      ; or $0 -cd <project>
       $0 <project> <git subcommand> ... ; or $0 -git <project> <git subcommand>
USAGE
                false
            fi
        ;;
    esac
}

# vim: set ft=zsh:
